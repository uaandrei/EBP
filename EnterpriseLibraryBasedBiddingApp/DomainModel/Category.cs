//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;



namespace DomainModel
{
    public partial class Category
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Product> Products
        {
            get
            {
                if (_products == null)
                {
                    var newCollection = new FixupCollection<Product>();
                    newCollection.CollectionChanged += FixupProducts;
                    _products = newCollection;
                }
                return _products;
            }
            set
            {
                if (!ReferenceEquals(_products, value))
                {
                    var previousValue = _products as FixupCollection<Product>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProducts;
                    }
                    _products = value;
                    var newValue = value as FixupCollection<Product>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProducts;
                    }
                }
            }
        }
        private ICollection<Product> _products;
    
        public virtual Category ParentCategory
        {
            get { return _parentCategory; }
            set
            {
                if (!ReferenceEquals(_parentCategory, value))
                {
                    var previousValue = _parentCategory;
                    _parentCategory = value;
                    FixupParentCategory(previousValue);
                }
            }
        }
        private Category _parentCategory;
    
        public virtual ICollection<Category> Categories
        {
            get
            {
                if (_categories == null)
                {
                    var newCollection = new FixupCollection<Category>();
                    newCollection.CollectionChanged += FixupCategories;
                    _categories = newCollection;
                }
                return _categories;
            }
            set
            {
                if (!ReferenceEquals(_categories, value))
                {
                    var previousValue = _categories as FixupCollection<Category>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCategories;
                    }
                    _categories = value;
                    var newValue = value as FixupCollection<Category>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCategories;
                    }
                }
            }
        }
        private ICollection<Category> _categories;

        #endregion

        #region Association Fixup
    
        private void FixupParentCategory(Category previousValue)
        {
            if (previousValue != null && previousValue.Categories.Contains(this))
            {
                previousValue.Categories.Remove(this);
            }
    
            if (ParentCategory != null)
            {
                if (!ParentCategory.Categories.Contains(this))
                {
                    ParentCategory.Categories.Add(this);
                }
            }
        }
    
        private void FixupProducts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Product item in e.NewItems)
                {
                    item.Category = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Product item in e.OldItems)
                {
                    if (ReferenceEquals(item.Category, this))
                    {
                        item.Category = null;
                    }
                }
            }
        }
    
        private void FixupCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Category item in e.NewItems)
                {
                    item.ParentCategory = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Category item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentCategory, this))
                    {
                        item.ParentCategory = null;
                    }
                }
            }
        }

        #endregion

    }
}
