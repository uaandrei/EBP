//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;



namespace DomainModel
{
    public partial class Product
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int CategoryId
        {
            get { return _categoryId; }
            set
            {
                if (_categoryId != value)
                {
                    if (Category != null && Category.Id != value)
                    {
                        Category = null;
                    }
                    _categoryId = value;
                }
            }
        }
        private int _categoryId;
    
        public virtual System.DateTime BidStartDate
        {
            get;
            set;
        }
    
        public virtual System.DateTime BidEndDate
        {
            get;
            set;
        }
    
        public virtual decimal StartingPrice
        {
            get;
            set;
        }
    
        public virtual string BidCurrency
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual bool Available
        {
            get;
            set;
        }
    
        public virtual int UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    if (User != null && User.Id != value)
                    {
                        User = null;
                    }
                    _userId = value;
                }
            }
        }
        private int _userId;

        #endregion

        #region Navigation Properties
    
        public virtual Category Category
        {
            get { return _category; }
            set
            {
                if (!ReferenceEquals(_category, value))
                {
                    var previousValue = _category;
                    _category = value;
                    FixupCategory(previousValue);
                }
            }
        }
        private Category _category;
    
        public virtual ICollection<Bid> Bids
        {
            get
            {
                if (_bids == null)
                {
                    var newCollection = new FixupCollection<Bid>();
                    newCollection.CollectionChanged += FixupBids;
                    _bids = newCollection;
                }
                return _bids;
            }
            set
            {
                if (!ReferenceEquals(_bids, value))
                {
                    var previousValue = _bids as FixupCollection<Bid>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBids;
                    }
                    _bids = value;
                    var newValue = value as FixupCollection<Bid>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBids;
                    }
                }
            }
        }
        private ICollection<Bid> _bids;
    
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;

        #endregion

        #region Association Fixup
    
        private void FixupCategory(Category previousValue)
        {
            if (previousValue != null && previousValue.Products.Contains(this))
            {
                previousValue.Products.Remove(this);
            }
    
            if (Category != null)
            {
                if (!Category.Products.Contains(this))
                {
                    Category.Products.Add(this);
                }
                if (CategoryId != Category.Id)
                {
                    CategoryId = Category.Id;
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.Products.Contains(this))
            {
                previousValue.Products.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Products.Contains(this))
                {
                    User.Products.Add(this);
                }
                if (UserId != User.Id)
                {
                    UserId = User.Id;
                }
            }
        }
    
        private void FixupBids(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Bid item in e.NewItems)
                {
                    item.Product = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Bid item in e.OldItems)
                {
                    if (ReferenceEquals(item.Product, this))
                    {
                        item.Product = null;
                    }
                }
            }
        }

        #endregion

    }
}
